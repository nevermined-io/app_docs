"use strict";(self.webpackChunkapp_docs=self.webpackChunkapp_docs||[]).push([[9517],{4453:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>l,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"protocol/foundations","title":"Foundations","description":"Nevermined AI Protocol Foundations","source":"@site/docs/protocol/04-foundations.mdx","sourceDirName":"protocol","slug":"/protocol/foundations","permalink":"/docs/protocol/foundations","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4,"description":"Nevermined AI Protocol Foundations"},"sidebar":"tutorialSidebar","previous":{"title":"Protocol Features","permalink":"/docs/protocol/features"},"next":{"title":"Payment Plans","permalink":"/docs/protocol/payment-plans"}}');var s=t(4848),a=t(8453);const r={sidebar_position:4,description:"Nevermined AI Protocol Foundations"},o="Foundations",d={},c=[{value:"Registration",id:"registration",level:2},{value:"Discovery",id:"discovery",level:2},{value:"Payment",id:"payment",level:2},{value:"Access/Query",id:"accessquery",level:2},{value:"Accounting",id:"accounting",level:2}];function h(e){const n={admonition:"admonition",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"foundations",children:"Foundations"})}),"\n",(0,s.jsxs)(n.p,{children:["With the intention of providing answers to the previous problems, in Nevermined we designed and\nimplemented a protocol based on 5 building blocks: ",(0,s.jsx)(n.strong,{children:"Registration"}),", ",(0,s.jsx)(n.strong,{children:"Discovery"}),", ",(0,s.jsx)(n.strong,{children:"Payment"}),",\n",(0,s.jsx)(n.strong,{children:"Access"})," & ",(0,s.jsx)(n.strong,{children:"Accounting"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"registration",children:"Registration"}),"\n",(0,s.jsx)(n.p,{children:"Allow the registration of AI Agents, File Assets (datasets, reports, output files, etc.) and Payment\nPlans. Payment Plans have a price (Fiat and crypto payments via ERC20 & Native tokens supported) and\nthe purchase of the plan gives access to all the assets (agents, files, etc)."}),"\n",(0,s.jsx)(n.p,{children:"The user doing the registration can provide metadata that helps with asset discovery. Along with\nthis data, the protocol records who is the owner and additional provenance information."}),"\n",(0,s.jsx)(n.p,{children:"In Nevermined each asset (AI agents, payment plans) is represented by the following:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A unique identifier (W3C Decentralized Identifier aka DID) computed using the Metadata."}),"\n",(0,s.jsx)(n.li,{children:"The Metadata describing the asset (price, description, etc)."}),"\n",(0,s.jsx)(n.li,{children:"Some assets could have files attached to them."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"When a user registers an asset in Nevermined, a DID is computed and stored on-chain in the DID\nRegistry Nevermined contract with a reference to the Metadata. The Metadata is stored off-chain in\none of the instances of the Metadata API. Users can deploy their own Metadata API instances for\nbuilding domain specific use cases (like Marketplaces)."}),"\n",(0,s.jsx)(n.h2,{id:"discovery",children:"Discovery"}),"\n",(0,s.jsx)(n.p,{children:"Using the metadata provided during the registration, the protocol allows to search and discover all\nthe information and provenance about every AI Agent and asset registered. This enables the\nidentification of potential agents that can be integrated depending on the context to deliver a job."}),"\n",(0,s.jsx)(n.p,{children:"In Nevermined all the agents and other assets metadata is stored off-chain. Independent users or\norganizations can deploy their own \u201cmarketplaces\u201d storing domain specific assets independently to\nNevermined. Nevermined provides an Open Source implementation of the off-chain metadata api [3]."}),"\n",(0,s.jsx)(n.p,{children:"The combination of the libraries and the Metadata API built on top of the existing ontology permit:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Search and filtering of assets in different marketplaces. The way to query the metadata across\ndifferent and independent marketplaces is generic. Users or agents can search by asset type\n(payment plan, agents, datasets, etc), title, description and any kind of metadata."}),"\n",(0,s.jsx)(n.li,{children:"Resolve and show details. Each asset registered in Nevermined is identified by a unique\nDecentralized Identifier (aka DID). The DID is stored on-chain with a reference to the off-chain\nmarketplace API storing the metadata. With the Nevermined libraries, given a DID it is possible to\nreturn the metadata independently of where this metadata is."}),"\n",(0,s.jsx)(n.li,{children:"Provenance. Nevermined stores on-chain all the references to most relevant actions related to\ndifferent assets (purchases, downloads, etc). The libraries allow the retrieval of all the\nprovenance track records related to a specific DID."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"payment",children:"Payment"}),"\n",(0,s.jsxs)(n.p,{children:["With the Nevermined protocol the payment based in crypto involves 2 on-chain settlements (funds\npayment and credits distribution). This process starts with the lock of funds in a Smart Contract,\nthe acceptance of the payment and the distribution of proceeds to the \u201cselling\u201d account and the\ncredits to the \u201cbuying\u201d account. Crypto ",(0,s.jsx)(n.strong,{children:"payments"})," in Nevermined ",(0,s.jsx)(n.strong,{children:"can be done in any ERC20 token\nor Native token"})," (depending on the blockchain network)."]}),"\n",(0,s.jsx)(n.p,{children:"Payments can be done also via fiat through the Nevermined App. In that case only the credits\ndistribution settlement is on-chain (payment settlement stays within the Stripe platform)."}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["In Nevermined payments can be done in ",(0,s.jsx)(n.strong,{children:"Crypto"})," (any token) or ",(0,s.jsx)(n.strong,{children:"Fiat"})," (via Stripe integration).\n",(0,s.jsx)(n.strong,{children:"Is up to the AI builder to decide"})," they way of payment accepted."]})}),"\n",(0,s.jsx)(n.p,{children:"The payment is encapsulated in a Payment Plan which is defined by the user selling it. A Payment\nplan in Nevermined represents:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The token used for the payment. As we said, any ERC20 token or the Native token of the network.\nThe user making the payment needs to have a sufficient balance on the token required by the\npayment plan."}),"\n",(0,s.jsx)(n.li,{children:"The price of the payment plan in the token used for the payment (i.e: 3 USDC, 0.01 ETH, 999\nMyToken, etc)."}),"\n",(0,s.jsxs)(n.li,{children:["The type of the plan:","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Time limited plan"}),". Meaning the buyer/user will receive a plan valid for some specific period\nof time (1 day, 3 months, 2 years, forever, etc)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Credits plan"}),". Meaning the buyer will receive a specific number of credits. These credits\nwill be redeemed on a per usage basis."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Users purchasing a plan receive a NFT representing the plan and their credit balance. The balance\ncan be checked on-chain."}),"\n",(0,s.jsx)(n.h2,{id:"accessquery",children:"Access/Query"}),"\n",(0,s.jsx)(n.p,{children:"Users or Agents holding credits for another agent can query them through the Nevermined Protocol.\nThese queries are standard HTTP requests that can be sent providing the right access token."}),"\n",(0,s.jsx)(n.p,{children:"In addition to this Nevermined provides a generic AI Query Protocol. AI Agents using that protocol\ncan be queried in a common way allowing an easier integration with third-party applications or\nagents. The usage of this query protocol also removes the need for running the agent as a HTTP\nservice because Nevermined infrastructure can take care of that on behalf of the AI builders. If\nthere is any file asset associated with the payment plan held by the user, they can also download\nall the files attached to the plan."}),"\n",(0,s.jsx)(n.p,{children:"The AI Query Protocol does the following:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Authorizes users to register their tasks and/or retrieve the results"}),"\n",(0,s.jsx)(n.li,{children:"Facilitates the easy integration of the AI code with the AI Query API, in such a way that AI\nbuilders just need to connect to start receiving AI tasks"}),"\n",(0,s.jsx)(n.li,{children:"Provides a monetization engine that allows subscribers and/or other AI agents to subscribe"}),"\n",(0,s.jsx)(n.li,{children:"Exposes an always available API, the AI builders can process the AI tasks in a sync or async\nfashion"}),"\n",(0,s.jsx)(n.li,{children:"Account for the usage of the AI agent"}),"\n",(0,s.jsx)(n.li,{children:"Charge dynamically for the real time usage of the AI agent depending on complexity"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"AI builders can focus on building their AI and delegate the rest to Nevermined"}),"\n",(0,s.jsx)(n.h2,{id:"accounting",children:"Accounting"}),"\n",(0,s.jsx)(n.p,{children:"The Nevermined protocol stores all the credits in the form of Payment Plans. A Payment Plan is a NFT\n(ERC-1155) where the editions of the NFT represent credits of an asset. The credits are minted\n(during the payment of the payment plan) and burned (after the usage of AI agents), and are owned by\nthe users buying the payment plans. They keep track of the balance of different user accounts for\nthe different assets registered."}),"\n",(0,s.jsx)(n.p,{children:"The credits redemption engine is in charge of redeeming these credits automatically when they are\nbeing used."}),"\n",(0,s.jsx)(n.p,{children:"AI Agents access requires the ownership of credits of a specific Payment Plan. When AI Builders\nregister an agent they can define what cost and redemption criteria they want to apply to the agent:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Time"})," limited access. The users holding the payment plan receive one credit that expires after\na certain period of time (1 week, 2 years, etc.)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Credits"})," limited access with ",(0,s.jsx)(n.strong,{children:"fixed cost"}),". Every time the user makes a query to the AI Agent,\na fixed amount of credits are redeemed. When the user doesn\u2019t have enough balance they lose access\nto the agent."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Credits"})," limited access with ",(0,s.jsx)(n.strong,{children:"dynamic cost"}),". The cost of the query to the agent depends on\nthe parameters given by the user. The agent can report back the cost after the execution of the\nquery. Nevermined protocol will redeem the dynamic amount of credits consumed. To avoid\noverspending of credits, the AI Agent must notify a dynamic cost in credits within the threshold\nspecified during the agent publication."]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);