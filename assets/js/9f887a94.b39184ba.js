"use strict";(self.webpackChunkapp_docs=self.webpackChunkapp_docs||[]).push([[8956],{1696:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>u});var a=n(5893),s=n(1151),r=n(599),i=n(2983);const o={sidebar_position:3,description:"How AI Builders can register Payment Plans and Agents?"},l="How to register Payment Plans and Agents?",c={id:"libraries/assets-registration",title:"How to register Payment Plans and Agents?",description:"How AI Builders can register Payment Plans and Agents?",source:"@site/docs/libraries/03-assets-registration.md",sourceDirName:"libraries",slug:"/libraries/assets-registration",permalink:"/docs/libraries/assets-registration",draft:!1,unlisted:!1,editUrl:"https://github.com/nevermined-io/app_docs/tree/main/docs/libraries/03-assets-registration.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,description:"How AI Builders can register Payment Plans and Agents?"},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/libraries/getting-started"},next:{title:"How Subscribers can order Plans?",permalink:"/docs/libraries/order-plans"}},d={},u=[{value:"Creating a Payments Plan",id:"creating-a-payments-plan",level:2},{value:"Creating a Credit-Based Payment Plan",id:"creating-a-credit-based-payment-plan",level:3},{value:"Creating a Time-Based Payment Plan",id:"creating-a-time-based-payment-plan",level:3},{value:"Registering an AI Agent",id:"registering-an-ai-agent",level:3}];function p(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"how-to-register-payment-plans-and-agents",children:"How to register Payment Plans and Agents?"})}),"\n",(0,a.jsx)(t.p,{children:"Once you have a Payments instance, you can start registering Payment Plans and AI Agents."}),"\n",(0,a.jsx)(t.h2,{id:"creating-a-payments-plan",children:"Creating a Payments Plan"}),"\n",(0,a.jsx)(t.p,{children:"Payment Plans give AI Builders the ability to control how and when users can use an AI agent or service. They are entirely controlled and managed by the AI Builder that creates them with no interference from Nevermined."}),"\n",(0,a.jsx)(t.p,{children:"Nevermined Payment Plans enable the set up of time-based or request-based gating of a Builder's AI."}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Request-Based or Credits-Based"}),": Provisions User access with request-gating. In this case, Builders can manage the number of requests that a User can make to access their AI service. This is done by prompting the Builder to set the number of credits needed to make a request to the AI service / app when they add that service to a Payment Plan package. Once set, each time a request is made by a User, Nevermined will redeem the specified number of credits needed to make the request. If the User does not have enough credits, they will be prompted to purchase more credits and denied access to the Builder's AI service / app."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Time-Based"}),": Provisions User access with time-gating. Builders can set the time period that a User will be allowed access to the AI. For example, this could be 1 year, 1 month, 1 week, 1 day, 1 hour, etc. When a user makes a request, the corresponding access credit will be redeemed and grant that User access to the AI service for the period designated by the Builder. Once the time period has elapsed, the User will no longer have access, and will need to redeem another credit if additional access is required."]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"creating-a-credit-based-payment-plan",children:"Creating a Credit-Based Payment Plan"}),"\n",(0,a.jsxs)(r.Z,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Typescript",value:"typescript"}],children:[(0,a.jsx)(i.Z,{value:"python",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"USDC_ERC20_TESTING = '0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d' # This is the USDC ERC20 address in the testing network\n\nplan_DID = payments_builder.create_credits_plan({\n  name: 'E2E Payments Plan', \n  description: 'description', \n  price:15000000n, # 15 USDC\n  token_address: USDC_ERC20_TESTING,\n  amount_of_credits: 100 # It means when someone purchase this plan, they will get 100 credits\n})\n"})})}),(0,a.jsx)(i.Z,{value:"typescript",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"const USDC_ERC20_TESTING = '0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d' // This is the USDC ERC20 address in the testing network\n\nconst planDID = await paymentsBuilder.createCreditsPlan({\n  name: 'E2E Payments Plan', \n  description: 'description', \n  price:15000000n, // 15 USDC\n  tokenAddress: USDC_ERC20_TESTING,\n  amountOfCredits: 100 // It means when someone purchase this plan, they will get 100 credits\n})\n"})})})]}),"\n",(0,a.jsx)(t.h3,{id:"creating-a-time-based-payment-plan",children:"Creating a Time-Based Payment Plan"}),"\n",(0,a.jsxs)(r.Z,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Typescript",value:"typescript"}],children:[(0,a.jsx)(i.Z,{value:"python",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:'USDC_ERC20_TESTING = \'0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d\' # This is the USDC ERC20 address in the testing network\n\nplan_DID = payments.create_time_plan({\n  name: "My 1 Month Plan",\n  description: "test",\n  price:15000000n, # 15 USDC\n  token_address: USDC_ERC20_TESTING,\n  duration: 30, # 30 days\n  tags: ["test"]\n})  \n'})})}),(0,a.jsx)(i.Z,{value:"typescript",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'const USDC_ERC20_TESTING = \'0x75faf114eafb1BDbe2F0316DF893fd58CE46AA4d\' // This is the USDC ERC20 address in the testing network\n\nconst planDID = await payments.createTimePlan({\n  name: "My 1 Month Plan",\n  description: "test",\n  price:15000000n, // 15 USDC\n  tokenAddress: USDC_ERC20_TESTING,\n  duration: 30, // 30 days\n  tags: ["test"]\n})\n\n'})})})]}),"\n",(0,a.jsx)(t.h3,{id:"registering-an-ai-agent",children:"Registering an AI Agent"}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"Before registering an AI Agent, you need to have a Payment Plan created."})}),"\n",(0,a.jsxs)(r.Z,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Typescript",value:"typescript"}],children:[(0,a.jsx)(i.Z,{value:"python",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-python",children:"# When you create an agent, you need to provide the endpoints that the agent exposes and are protected by the Payment Plan\n# You must specify the HTTP method and the URL pattern that the agent exposes\n# You can use wildcards (.*) to match any string\nagent_endpoints = [\n   { 'POST': 'https://example.com/api/v1/agents/(.*)/tasks' },\n   { 'GET': 'https://example.com/api/v1/agents/(.*)/tasks/(.*)' }\n]\n\nagent_DID = payments_builder.create_service({\n  plan_DID, # The DID of the Payment Plan we created before\n  name: 'My AI Assistant',\n  description: 'description of the assistant',\n  serviceType: 'agent',\n  serviceChargeType: 'fixed',\n  authType: 'bearer',\n  token: 'changeme',\n  amountOfCredits: 1,\n  endpoints: agent_endpoints,\n  openEndpoints: ['https://example.com/api/v1/rest/docs-json']\n})  \n"})})}),(0,a.jsx)(i.Z,{value:"typescript",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// When you create an agent, you need to provide the endpoints that the agent exposes and are protected by the Payment Plan\n// You must specify the HTTP method and the URL pattern that the agent exposes\n// You can use wildcards (.*) to match any string\nconst agentEndpoints: Endpoint[] = [\n   { 'POST': 'https://example.com/api/v1/agents/(.*)/tasks' },\n   { 'GET': 'https://example.com/api/v1/agents/(.*)/tasks/(.*)' }\n]\n\nconst agentDID = await paymentsBuilder.createService({\n  planDID, // The DID of the Payment Plan we created before\n  name: 'My AI Assistant',\n  description: 'description of the assistant',\n  serviceType: 'agent',\n  serviceChargeType: 'fixed',\n  authType: 'bearer',\n  token: 'changeme',\n  amountOfCredits: 1,\n  endpoints: ENDPOINTS,\n  openEndpoints: ['https://example.com/api/v1/rest/docs-json']\n})\n\n"})})})]})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},2983:(e,t,n)=>{n.d(t,{Z:()=>i});n(7294);var a=n(512);const s={tabItem:"tabItem_Ymn6"};var r=n(5893);function i(e){let{children:t,hidden:n,className:i}=e;return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.Z)(s.tabItem,i),hidden:n,children:t})}},599:(e,t,n)=>{n.d(t,{Z:()=>T});var a=n(7294),s=n(512),r=n(2466),i=n(6550),o=n(469),l=n(1980),c=n(7392),d=n(812);function u(e){return a.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??function(e){return u(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:s}}=e;return{value:t,label:n,attributes:a,default:s}}))}(n);return function(e){const t=(0,c.lx)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function m(e){let{queryString:t=!1,groupId:n}=e;const s=(0,i.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(r),(0,a.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(s.location.search);t.set(r,e),s.replace({...s.location,search:t.toString()})}),[r,s])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:s}=e,r=p(e),[i,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[c,u]=m({queryString:n,groupId:s}),[g,y]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[s,r]=(0,d.Nk)(n);return[s,(0,a.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:s}),b=(()=>{const e=c??g;return h({value:e,tabValues:r})?e:null})();(0,o.Z)((()=>{b&&l(b)}),[b]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),y(e)}),[u,y,r]),tabValues:r}}var y=n(2389);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var f=n(5893);function v(e){let{className:t,block:n,selectedValue:a,selectValue:i,tabValues:o}=e;const l=[],{blockElementScrollPositionUntilNextRender:c}=(0,r.o5)(),d=e=>{const t=e.currentTarget,n=l.indexOf(t),s=o[n].value;s!==a&&(c(t),i(s))},u=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=l.indexOf(e.currentTarget)+1;t=l[n]??l[0];break}case"ArrowLeft":{const n=l.indexOf(e.currentTarget)-1;t=l[n]??l[l.length-1];break}}t?.focus()};return(0,f.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t),children:o.map((e=>{let{value:t,label:n,attributes:r}=e;return(0,f.jsx)("li",{role:"tab",tabIndex:a===t?0:-1,"aria-selected":a===t,ref:e=>l.push(e),onKeyDown:u,onClick:d,...r,className:(0,s.Z)("tabs__item",b.tabItem,r?.className,{"tabs__item--active":a===t}),children:n??t},t)}))})}function x(e){let{lazy:t,children:n,selectedValue:r}=e;const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:(0,s.Z)("margin-top--md",e.props.className)}):null}return(0,f.jsx)("div",{className:"margin-top--md",children:i.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r})))})}function P(e){const t=g(e);return(0,f.jsxs)("div",{className:(0,s.Z)("tabs-container",b.tabList),children:[(0,f.jsx)(v,{...t,...e}),(0,f.jsx)(x,{...t,...e})]})}function T(e){const t=(0,y.Z)();return(0,f.jsx)(P,{...e,children:u(e.children)},String(t))}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>i});var a=n(7294);const s={},r=a.createContext(s);function i(e){const t=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);