"use strict";(self.webpackChunkapp_docs=self.webpackChunkapp_docs||[]).push([[4519],{926:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/integration_human-0e3715bb23c9037a9ba8e1b183e5b6b9.png"},2579:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/integration_without_human-966d1b115a9d0a4f4fcbd4d3ce17dbdf.png"},6154:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/architecture_high_level_flow-085cc8c5bab3a0f8250091e0b6935b2d.png"},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(6540);const r={},s=i.createContext(r);function a(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:t},e.children)}},9586:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"protocol/agents-integration","title":"AI Agents Integration","description":"AI Agents Integration","source":"@site/docs/protocol/08-agents-integration.mdx","sourceDirName":"protocol","slug":"/protocol/agents-integration","permalink":"/docs/protocol/agents-integration","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8,"description":"AI Agents Integration"},"sidebar":"tutorialSidebar","previous":{"title":"AI Agents Query Protocol","permalink":"/docs/protocol/query-protocol"},"next":{"title":"High Level Architecture","permalink":"/docs/protocol/high-level-architecture"}}');var r=n(4848),s=n(8453);const a={sidebar_position:8,description:"AI Agents Integration"},o="AI Agents Integration",h={},c=[{value:"Registration of AI Agents",id:"registration-of-ai-agents",level:2},{value:"Querying AI Agents",id:"querying-ai-agents",level:2},{value:"Querying an Agent with a Human in the loop",id:"querying-an-agent-with-a-human-in-the-loop",level:3},{value:"Querying an Agent without a Human in the loop",id:"querying-an-agent-without-a-human-in-the-loop",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"ai-agents-integration",children:"AI Agents Integration"})}),"\n",(0,r.jsx)(t.p,{children:"The Nevermined protocol allows the registration, payment and usage of AI Agents. The following\npoints describe the typical interaction between an AI builder managing an AI Agent and a final user:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"The AI builder registers the AI Agent & Pricing Plan via the Nevermined App or the Nevermined Library"}),"\n",(0,r.jsx)(t.li,{children:"A user (or AI Agent) discovers the AI Agent and purchases the Pricing Plan attached to it (also\nvia App or Library). When the user makes this payment it receives credits representing the\nPricing Plan in their wallet"}),"\n",(0,r.jsx)(t.li,{children:"The user makes a request to the AI Agent of a new Task. This Task is requested via a HTTP request\nsent to the AI Agent through the Nevermined Proxy"}),"\n",(0,r.jsx)(t.li,{children:"The Nevermined Proxy validates the user request and if everything is correct lets it pass the\nrequest to the Nevermined AI API"}),"\n",(0,r.jsx)(t.li,{children:"The AI Agent subscribes for new Tasks. It picks up the Task requested from the user."}),"\n",(0,r.jsx)(t.li,{children:"The AI Agent processes the Task and Steps and reports back the results of the execution of the Task"}),"\n",(0,r.jsx)(t.li,{children:"The user fetches the AI results"}),"\n"]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(t.p,{children:"If the request sent by the user was processed correctly, Nevermined infrastructure will redeem the credits\nused to process the Task."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"AI High Level Flow",src:n(6154).A+"",width:"1740",height:"795"})}),"\n",(0,r.jsxs)(t.admonition,{type:"info",children:[(0,r.jsx)(t.p,{children:"All the integration with Agents (with or without human in the loop) can be handled using the"}),(0,r.jsx)("u",{children:(0,r.jsx)(t.a,{href:"query-protocol",children:"Agents Query Protocol"})})]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(t.p,{children:"Via the Nevermined Protocol Agents can be integrated to be used by users or other applications. Once\nthe user owns the plan giving access to an AI Agent, it is up to the user to decide how they want to\nintegrate or use that Agent. For example:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Building a user interface that sends queries to the Agent and returns the answers provided"}),"\n",(0,r.jsx)(t.li,{children:"Integrating the Agent in another AI Agent with a bigger purpose. So the second Agent integrating\nthe first one can decompose complex questions into smaller steps where some of these steps can be\nresolved by other AI."}),"\n",(0,r.jsx)(t.li,{children:"Use directly the AI Agent sending direct queries from a command line interface or similar."}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"registration-of-ai-agents",children:"Registration of AI Agents"}),"\n",(0,r.jsx)(t.p,{children:"The Nevermined protocol enables registration of AI Agents and Pricing Plans in the network. This\nregistration happens directly from the AI Builder side and involves the following steps:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"The AI Builder locally computes the unique identifier (aka DID) using the Metadata\ndescribing the resource and registers it on-chain in the DIDRegistry Smart Contract, associating the\nDID with the URL where the metadata will be stored"}),"\n",(0,r.jsx)(t.li,{children:"The AI Builder stores the metadata in any existing Metadata API implementation"}),"\n"]}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["A DID stands for Decentralized Identifier. You can find further information about the DID standard\nin the ",(0,r.jsx)(t.a,{href:"https://www.w3.org/TR/did-core/",children:"W3C DID specification"}),"."]})}),"\n",(0,r.jsx)(t.p,{children:"Having a DID of an Agent, any user can resolve the metadata describing that Agent:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["The user having the DID can get the full metadata url from the ",(0,r.jsx)(t.code,{children:"DIDRegistry"})," contract"]}),"\n",(0,r.jsx)(t.li,{children:"Having the metadata url the user can fetch the complete metadata from the Metadata API"}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"querying-ai-agents",children:"Querying AI Agents"}),"\n",(0,r.jsx)(t.h3,{id:"querying-an-agent-with-a-human-in-the-loop",children:"Querying an Agent with a Human in the loop"}),"\n",(0,r.jsx)(t.p,{children:"This scenario is the representation of a user who identifies an interesting AI Agent, purchases it\nand integrates the Agent (via the Nevermined Library) in some software. The flow is as follows:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"The user discovers an AI Agent via Nevermined App or Library"}),"\n",(0,r.jsx)(t.li,{children:"The user purchases the Pricing Plan attached to it. The settlements for the payment and\ndistribution are registered on-chain"}),"\n",(0,r.jsx)(t.li,{children:"The user gets an access key (JWT) granting access to the Pricing Plan's Agents and services"}),"\n",(0,r.jsx)(t.li,{children:"The user configures the Access Token, Proxy and DID of the Agent in the software"}),"\n",(0,r.jsx)(t.li,{children:"Via the Nevermined Library (or standard HTTP requests) the software configured by the user\nrequests the execution of a Task to the AI Agent through the Proxy"}),"\n",(0,r.jsx)(t.li,{children:"The Nevermined Proxy validates the request"}),"\n",(0,r.jsx)(t.li,{children:"If everything is right the Proxy forwards the request to the Upstream AI Agent"}),"\n",(0,r.jsx)(t.li,{children:"The Agent processes the Task requested and returns the results"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"As described before, if the execution was correct Nevermined infrastructure will redeem the credits\nused to process the Task."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"AI Agent integration with human in the loop",src:n(926).A+"",width:"960",height:"540"})}),"\n",(0,r.jsx)(t.h2,{id:"querying-an-agent-without-a-human-in-the-loop",children:"Querying an Agent without a Human in the loop"}),"\n",(0,r.jsx)(t.p,{children:"This scenario is more sophisticated and represents an autonomous Agent that via the Nevermined\nProtocol discovers other Agents and integrates them automatically without any user interaction.\nThis scenario requires the AI Builder to create an AI Agent integrated via the Nevermined Library,\nsophisticated enough to perform the discovery process, purchase and query programmatically via that\nLibrary. The flow is as follows:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"The AI Builder gets the Nevermined API Key from the Nevermined App. The user is able to configure\ncertain permissions associated with the key"}),"\n",(0,r.jsx)(t.li,{children:"The App returns the Nevermined API Key to the AI Builder"}),"\n",(0,r.jsx)(t.li,{children:"The AI Builder configures the API Key in the Agent via Nevermined Library"}),"\n",(0,r.jsx)(t.li,{children:"Having the API Key configured the AI Agent can discover other Agents, purchase access credits and\nquery them without any human interaction"}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"AI Agent integration without a human in the loop",src:n(2579).A+"",width:"960",height:"540"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}}}]);